#!/usr/bin/env python

from urllib3 import PoolManager
from unicodedata import normalize, combining
from re import search, sub
from sys import argv

class Description:
    
    def __init__(self,word):
        self.word = word
        self.norm_word = self.normalize_word()
        self.description = self.get_description()

    def __repr__(self):
        if self.description == 'Result not found':
            return 'Result not found'
        # This \033[1;32m<word>\033[00m ANSI escape sequence makes the word 
        # be printed in the terminal in a green color instead of white
        return f"\n\033[1;32m{self.word.capitalize()}\033[00m\n\n    " + \
               f"{self.description}\n"

    def normalize_word(self) -> str:
        # normalize_word returns the word without accents and cedilha
        # to be concatenated with the URL_BASE and used to get a response
        return ''.join([c for c in normalize('NFKD',self.word)
            if not combining(c)])

    def get_result(self):
        URL_BASE = 'https://www.dicio.com.br/'
        content = PoolManager().request('GET',URL_BASE + self.norm_word)
        result = search('<p itemprop="description" class=*(.*)</p>',
                content.data.decode())
        return result

    def get_description(self) -> str:
        result = self.get_result()
        if result == None or 'Ainda n√£o temos o significado' in result.group():
            # if the word is not on dicio.com.br, result can be None, if it's
            # gibberish, or it can be a warning that the word is not on the 
            # site if it's a word with similar results on the site
            return 'Result not found'
        else:
            # sub here removes all html tags like <span> </span> <p> that
            # it can find. That can lead to some words being united with a dot
            # were a tag was before, so the split('.') removes all dots and 
            # the string is joined again with '. '.join()
            description = '. '.join(sub('<.*?>','',result.group()).split('.'))
            # This split is to separate the description like it is presented 
            # on dicio.com.br website, so it separates it and adds newline 
            # between then
            return ';\n    '.join(line.capitalize() 
                    for line in description.split('; '))


if __name__ == '__main__':

    word = argv[1]
    print(Description(word))
